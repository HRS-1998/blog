import{_ as a,E as r,c as o,m as i,J as t,w as c,a as e,a2 as s,o as n,a3 as d,a4 as _,a5 as u,a6 as k,a7 as m}from"./chunks/framework.DBd-Bw_Q.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"page1/index.md","filePath":"page1/index.md","lastUpdated":1721901765000}'),p={name:"page1/index.md"},h={id:"docker",tabindex:"-1"},D=i("a",{class:"header-anchor",href:"#docker","aria-label":'Permalink to "<center> docker</center>"'},"​",-1),g=s('<p><a href="https://juejin.cn/post/7132756861626875917?searchId=202307190939028FD93DD4F8F9FB2B8B84" target="_blank" rel="noreferrer">文档来源</a></p><h6 id="docker组成" tabindex="-1">- docker组成 <a class="header-anchor" href="#docker组成" aria-label="Permalink to &quot;- docker组成&quot;">​</a></h6><ul><li>docker客户端 <ul><li>命令行(CLI)交互客户端。客户端使用REST API接口同Docker daemon进行访问</li></ul></li><li>Docker Daemon守护进程 <ul><li>用于管理Docker对象：镜像，容器，网络，数据卷</li></ul></li><li>Docker image镜像 <ul><li>一个制度模板，用于创建docker容器，由Dockerfile文本描述镜像内容</li><li>拉取和列出镜像 <ul><li>docker pull images:tag</li><li>docekr images</li></ul></li><li>创建镜像 <ul><li>使用commit创建镜像</li><li><img src="'+d+'" alt="docker创建镜像"></li></ul></li><li>DockerFile 文件的基本指令 <ul><li>FROM 定义基础镜像</li><li>MAINTAINER 作者或维护者</li><li>RUN 运行linux命令</li><li>ADD 增加文件或目录</li><li>EVN 定义环境变量</li><li>CMD 运行进程</li><li>示例(文档中有详解内容) <img src="'+_+'" alt="dockerFile示例"></li></ul></li></ul></li><li>DockerContainer 容器 <ul><li>是一个镜像的运行实例</li><li>运行过程 <img src="'+u+'" alt="docker"> 1.运行<code>$ docker run -i -t ubuntu /bin/bash</code>拉取镜像 2.Docker Engine检查ubuntu镜像是否存在，如果本地已经存在，使用该镜像创建容器，如果不存在，Docker Engine从镜像库拉取镜像，使用该镜像创建新容器 3.分配文件系统，挂载一个读写层，在读写层加载镜像 4.分配网络/网桥接口，创建一个网络接口，让容器和主机通信 5.从可用的IP池选择IP地址，分配给容器 6.执行命令/bin/bash 捕获和提供执行结果</li></ul></li><li>Docker Registry仓库 <img src="'+k+'" alt="docker"><img src="'+m+'" alt="docker"></li></ul>',3);function f(x,b,N,I,P,T){const l=r("center");return n(),o("div",null,[i("h3",h,[t(l,null,{default:c(()=>[e(" docker")]),_:1}),e(),D]),g])}const C=a(p,[["render",f]]);export{A as __pageData,C as default};
