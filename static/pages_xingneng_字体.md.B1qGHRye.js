import{_ as s,c as i,o as t,a2 as a}from"./chunks/framework.Dr1n16L8.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/xingneng/字体.md","filePath":"pages/xingneng/字体.md","lastUpdated":1751591074000}'),n={name:"pages/xingneng/字体.md"},l=a(`<h2 id="字体子集化" tabindex="-1">字体子集化 <a class="header-anchor" href="#字体子集化" aria-label="Permalink to &quot;字体子集化&quot;">​</a></h2><p><a href="https://blog.oonne.com/detail/font-face" target="_blank" rel="noreferrer">引用</a> 前言 使用个性化的字体是设计师的基本诉求。在 web 端使用特殊字体，前端工程师更喜欢引入自定义字体（@font-face），而不是用图。因为使用字体有若干好处：</p><ol><li>内容可以被复制，用户体验更好</li><li>方便修改内容（在 HTML 中直接修改文字）</li><li>方便矢量缩放（在 CSS 中使用 font-size 定义大小）</li><li>方便修改颜色（在 CSS 中使用 color 定义大小）</li><li>内容与样式分离，代码可读性高</li><li>利于 SEO</li></ol><p>然而，中文的字体文件一般都很大，动辄几 M 的文件严重拖累了页面的加载速度，用户体验难以接受。而我们需要的字形往往就只有标题、solgen 那几个，字体子集化就是在这种需求下诞生的：只提取需要用到的字形，大幅精简字体文件的大小。</p><p>本文介绍字体子集化的原理，并安利多种字体子集化的方案。</p><p>字体子集化的原理</p><p>中文字体的原理是这样：计算机对每个汉字进行编码，每个 unicode 码对应一个汉字。字体文件（font），就是对相应的 unicode 编码，指定一个字形（glyph）。计算机显示文字时，就按照这个字形来渲染。不同的字体对同一个文字定义的字形不一样，所以指定不同的字体就能有不同的样式。对于字体里未定义到的字形，使用默认字体进行渲染。</p><p>我们通常在网上下载开源的字体，都包含了大量的字形。比如经典的思源黑体就有一个“完全体”版本——填满 OTF 字符数上限（65535 个），覆盖简繁日韩字型的宏伟工程。就算是思源黑的简体中文子集，也收录了超过三万个字形。这么多的字形塞在一个字体文件里，字体文件自然会很大。所谓字体子集化，就是只提取需要用到的若干字形，生成一个非常小的字体文件，达到按需使用字形的效果。</p><p>因为各种历史原因，字体有若干格式，设计师常用的是 ttf 格式（TrueType）和 otf 格式（OpenType）。浏览器对字体的兼容性如下：</p><table><thead><tr><th style="text-align:left;">格式</th><th style="text-align:left;">IE</th><th style="text-align:left;">Firefox</th><th style="text-align:left;">Chrome</th><th style="text-align:left;">Safari</th><th style="text-align:left;">iOS</th><th style="text-align:left;">Android</th></tr></thead><tbody><tr><td style="text-align:left;">.otf</td><td style="text-align:left;">9</td><td style="text-align:left;">3.5</td><td style="text-align:left;">4.4</td><td style="text-align:left;">5.1</td><td style="text-align:left;">5.1</td><td style="text-align:left;">4.4</td></tr><tr><td style="text-align:left;">.ttf</td><td style="text-align:left;">9</td><td style="text-align:left;">3.5</td><td style="text-align:left;">4.4</td><td style="text-align:left;">5.1</td><td style="text-align:left;">5.1</td><td style="text-align:left;">4.4</td></tr><tr><td style="text-align:left;">.svg</td><td style="text-align:left;">9</td><td style="text-align:left;">3.5</td><td style="text-align:left;">4.4</td><td style="text-align:left;">5.1</td><td style="text-align:left;">5.1</td><td style="text-align:left;">4.4</td></tr><tr><td style="text-align:left;">.woff</td><td style="text-align:left;">9</td><td style="text-align:left;">3.6</td><td style="text-align:left;">4.4</td><td style="text-align:left;">5.1</td><td style="text-align:left;">5.1</td><td style="text-align:left;">4.4</td></tr><tr><td style="text-align:left;">.eot</td><td style="text-align:left;">9</td><td style="text-align:left;">3.5</td><td style="text-align:left;">4.4</td><td style="text-align:left;">5.1</td><td style="text-align:left;">5.1</td><td style="text-align:left;">4.4</td></tr></tbody></table><p>（表格来源：<a href="http://caniuse.com/#feat=fontface%EF%BC%89" target="_blank" rel="noreferrer">http://caniuse.com/#feat=fontface）</a></p><p>看完上表，偷懒不想兼容 IE 的人一拍桌子说：我只用 ttf 格式就够了。但其实这些格式之间的转换非常容易。且不说各种字体制作软件，即使想用脚本自动转换，npm 上也有 ttf2eot、ttf2svg、ttf2woff、otf2ttf、svg2ttf 等可以放心食用。</p><p>字体子集化的方案 1.字体制作软件 常用的字体编辑软件如 Fontforge、FontLab Studio、FontCreator 等，支持直接对字体的每一个字形进行编辑。设计师可以根据自己的需求绘制需要的字形，生成字体文件给到开发人员。偷懒的话，也可以找现成的字体，删除不必要的字符，并对需要的字符进行个性化加工。FontLab Studio 和 FontCreator 都是收费软件，设计字体也是非常辛苦的工作，推荐设计能力过剩的人使用。</p><p>2.简单工具 sfnttool.jar（JAVA）、Font Optimizer（Perl）、fonttools（python），挑顺手的用就行。</p><p>个人推荐：fonttools。健壮性不错，对 otf 的支持比下文 Node.js 的方案更完善，还支持压缩、微调等一系列功能。</p><p>3.前端工程化 前端从业人员用得最顺手的毕竟还是 javascript，总是希望这些工作能够用脚本自动完成，于是单独拎出来详细讲。</p><p>font-carrier 是一个功能强大的字体操作库，可以在 svg 维度改造字形。基于它有专门用于字体子集化的 font-collector。</p><p>fonteditor-core 可以从 ttf 字体中提取指定编码的字形。基于它有了 fontmin，写得非常好，也是目前最流行的前端字体子集化方案。如果想要整合进 gulp 流程中，还有 gulp-fontmin。</p><p>但上述的方案都需要自己输入子集化的内容。有人懒到连这一步也不想做，想要程序能自动分析页面内容，于是有了基于 fontmin 的 font-spider（什么，星星竟然比 fontmin 还多）。当然也配套了 gulp-font-spider。</p><p>个人推荐：想偷懒用 font-spider，有能力可以基于 fontmin 打造自己的开发流程。</p><p>vite 中使用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@vitejs/plugin-vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fontSpider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vite-plugin-font-spider&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fontSpider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      configPath: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font-spider-config.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定配置文件路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font-spider &amp;&amp; vite build&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>目录结构</li><li>my-vue-vite-project/</li><li>├── src/</li><li>│ ├── assets/</li><li>│ │ └── fonts/</li><li>│ │ ├── source-font.ttf</li><li>│ │ └── subset-fonts/</li><li>│ ├── components/</li><li>│ ├── views/</li><li>│ ├── App.vue</li><li>│ └── main.js</li><li>├── index.html</li><li>├── font-spider-config.json</li><li>├── vite.config.js</li><li>├── package.json</li><li>└── README.md</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Font </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vite-plugin-font&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Font.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 配置选项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fontName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-font&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 字体名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      formats: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;woff2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;woff&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出字体格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      injectTo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注入方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      include: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/assets/fonts/**/*.{ttf,otf}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 包含的字体文件路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      exclude: [], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 排除的字体文件路径</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 其他配置选项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,24),e=[l];function p(h,k,d,o,r,E){return t(),i("div",null,e)}const y=s(n,[["render",p]]);export{f as __pageData,y as default};
