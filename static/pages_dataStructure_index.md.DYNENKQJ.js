import{_ as a,c as e,o as t,a2 as o}from"./chunks/framework.Dr1n16L8.js";const m=JSON.parse('{"title":"数据结构","description":"","frontmatter":{},"headers":[],"relativePath":"pages/dataStructure/index.md","filePath":"pages/dataStructure/index.md","lastUpdated":1745906156000}'),r={name:"pages/dataStructure/index.md"},i=o('<h1 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h1><blockquote><p>数据结构是一种存储、组织数据的方式，旨在便于访问和修改。没有一种单一的数据结构对所有用途均有效，所以需要知道几种数据结构优势和局限。</p></blockquote><p>数据结构： 线性表 、栈 、队列 、数组、树与二叉树 、图</p><p>基于 c 语言的数据结构：函数 、 数组 、 字符串、 指针 、内存解析 、 结构体</p><h2 id="数据结构-1" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构-1" aria-label="Permalink to &quot;数据结构&quot;">​</a></h2><ol><li><p>数据的逻辑结构</p><p>1.1 集合结构 1.2 线性结构 数组、链表 ------栈、队列、哈希表 1.3 树形结构 1.4 图形结构</p></li><li><p>数据的物理结构 2.1 顺序存储结构 2.2 链式存储结构</p></li></ol><h2 id="算法复杂度" tabindex="-1">算法复杂度 <a class="header-anchor" href="#算法复杂度" aria-label="Permalink to &quot;算法复杂度&quot;">​</a></h2><ol><li><p>时间复杂度：</p></li><li><p>空间复杂度：</p></li><li><p>渐进符号 3.1 渐进紧确界符号 Θ 3.2 渐进上界符号 O 3.3 渐进下界符号 Ω</p></li></ol>',8),l=[i];function p(c,d,n,s,_,h){return t(),e("div",null,l)}const f=a(r,[["render",p]]);export{m as __pageData,f as default};
