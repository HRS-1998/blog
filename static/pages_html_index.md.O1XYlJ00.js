import{_ as e,c as t,o,a2 as a}from"./chunks/framework.Dr1n16L8.js";const q=JSON.parse('{"title":"html","description":"","frontmatter":{},"headers":[],"relativePath":"pages/html/index.md","filePath":"pages/html/index.md","lastUpdated":1743424161000}'),l={name:"pages/html/index.md"},r=a('<h1 id="html" tabindex="-1">html <a class="header-anchor" href="#html" aria-label="Permalink to &quot;html&quot;">​</a></h1><h1 id="浏览器从请求到渲染的完整过程及事件钩子" tabindex="-1">浏览器从请求到渲染的完整过程及事件钩子 <a class="header-anchor" href="#浏览器从请求到渲染的完整过程及事件钩子" aria-label="Permalink to &quot;浏览器从请求到渲染的完整过程及事件钩子&quot;">​</a></h1><p>本文详细描述了浏览器从发起请求到获取 HTML 并最终完成页面渲染的整个过程，涵盖网络请求、HTML 解析、DOM 构建、CSS 应用、JavaScript 执行以及页面绘制等阶段，并列出每个阶段可能涉及的事件钩子。</p><hr><h2 id="_1-发起网络请求" tabindex="-1">1. 发起网络请求 <a class="header-anchor" href="#_1-发起网络请求" aria-label="Permalink to &quot;1. 发起网络请求&quot;">​</a></h2><p>浏览器通过用户输入 URL 或点击链接触发页面加载。</p><h3 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ul><li><strong>URL 解析</strong>：解析协议（如 HTTP/HTTPS）、域名、路径等。</li><li><strong>DNS 解析</strong>：将域名解析为 IP 地址。 <ul><li><strong>事件钩子</strong>：无直接钩子，可通过开发者工具（如 Network 面板）监控。</li></ul></li><li><strong>建立 TCP 连接</strong>：完成三次握手。</li><li><strong>发送 HTTP 请求</strong>：发送 GET 请求，包含请求头（如 User-Agent、Accept）。</li></ul><h3 id="事件钩子" tabindex="-1">事件钩子 <a class="header-anchor" href="#事件钩子" aria-label="Permalink to &quot;事件钩子&quot;">​</a></h3><ul><li><code>fetch</code> 或 <code>XMLHttpRequest</code> 的 <code>onreadystatechange</code>：监听请求状态变化。</li></ul><hr><h2 id="_2-服务器响应" tabindex="-1">2. 服务器响应 <a class="header-anchor" href="#_2-服务器响应" aria-label="Permalink to &quot;2. 服务器响应&quot;">​</a></h2><p>服务器返回 HTML 文档，浏览器开始处理响应。</p><h3 id="步骤-1" tabindex="-1">步骤 <a class="header-anchor" href="#步骤-1" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ul><li><strong>接收响应头</strong>：读取状态码（如 200 OK）、内容类型（如 <code>text/html</code>）。</li><li><strong>下载 HTML 文件</strong>：接收 HTML 内容。</li></ul><h3 id="事件钩子-1" tabindex="-1">事件钩子 <a class="header-anchor" href="#事件钩子-1" aria-label="Permalink to &quot;事件钩子&quot;">​</a></h3><ul><li><code>window.performance</code> API（如 <code>performance.getEntriesByType(&quot;navigation&quot;)</code>）：记录请求时间。</li><li><code>DOMContentLoaded</code>：依赖此阶段完成，后续触发。</li></ul><hr><h2 id="_3-html-解析与-dom-构建" tabindex="-1">3. HTML 解析与 DOM 构建 <a class="header-anchor" href="#_3-html-解析与-dom-构建" aria-label="Permalink to &quot;3. HTML 解析与 DOM 构建&quot;">​</a></h2><p>浏览器解析 HTML 并构建 DOM 树。</p><h3 id="步骤-2" tabindex="-1">步骤 <a class="header-anchor" href="#步骤-2" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ul><li><strong>字节流解码</strong>：根据编码（如 UTF-8）将字节流解码为字符。</li><li><strong>标记化（Tokenization）</strong>：将 HTML 拆分为标记（如 <code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>）。</li><li><strong>DOM 树构建</strong>：生成 DOM 树。</li><li><strong>预加载扫描</strong>：扫描 <code>&lt;link&gt;</code>、<code>&lt;script&gt;</code> 等外部资源并提前请求。</li></ul><h3 id="事件钩子-2" tabindex="-1">事件钩子 <a class="header-anchor" href="#事件钩子-2" aria-label="Permalink to &quot;事件钩子&quot;">​</a></h3><ul><li><code>MutationObserver</code>：监听 DOM 树动态变化（适用于后续修改）。</li><li><code>&lt;script&gt;</code> 或 <code>&lt;link&gt;</code> 的 <code>onload</code>：监听外部资源加载完成。</li></ul><hr><h2 id="_4-css-解析与-cssom-构建" tabindex="-1">4. CSS 解析与 CSSOM 构建 <a class="header-anchor" href="#_4-css-解析与-cssom-构建" aria-label="Permalink to &quot;4. CSS 解析与 CSSOM 构建&quot;">​</a></h2><p>浏览器处理 CSS 文件并构建 CSSOM。</p><h3 id="步骤-3" tabindex="-1">步骤 <a class="header-anchor" href="#步骤-3" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ul><li><strong>下载 CSS 文件</strong>：通过 <code>&lt;link&gt;</code> 或内联 <code>&lt;style&gt;</code> 获取。</li><li><strong>CSS 解析</strong>：生成 CSSOM（CSS Object Model）。</li><li><strong>阻塞渲染</strong>：CSSOM 未完成前页面不渲染。</li></ul><h3 id="事件钩子-3" tabindex="-1">事件钩子 <a class="header-anchor" href="#事件钩子-3" aria-label="Permalink to &quot;事件钩子&quot;">​</a></h3><ul><li><code>&lt;link&gt;</code> 的 <code>onload</code>：监听 CSS 文件加载完成。</li></ul><hr><h2 id="_5-javascript-执行" tabindex="-1">5. JavaScript 执行 <a class="header-anchor" href="#_5-javascript-执行" aria-label="Permalink to &quot;5. JavaScript 执行&quot;">​</a></h2><p>浏览器处理 <code>&lt;script&gt;</code> 标签中的 JavaScript。</p><h3 id="步骤-4" tabindex="-1">步骤 <a class="header-anchor" href="#步骤-4" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ul><li><strong>下载外部脚本</strong>：通过 <code>&lt;script src&gt;</code> 下载。</li><li><strong>脚本执行</strong>：执行 JavaScript，可能修改 DOM 或 CSSOM。</li><li><strong>阻塞解析</strong>：默认阻塞 HTML 解析，可通过 <code>async</code> 或 <code>defer</code> 避免。</li></ul><h3 id="事件钩子-4" tabindex="-1">事件钩子 <a class="header-anchor" href="#事件钩子-4" aria-label="Permalink to &quot;事件钩子&quot;">​</a></h3><ul><li><code>&lt;script&gt;</code> 的 <code>onload</code> 或 <code>onerror</code>：监听脚本加载状态。</li><li><code>async</code>：加载后立即执行，无特定事件。</li><li><code>defer</code>：在 <code>DOMContentLoaded</code> 前执行。</li></ul><hr><h2 id="_6-构建渲染树-render-tree" tabindex="-1">6. 构建渲染树（Render Tree） <a class="header-anchor" href="#_6-构建渲染树-render-tree" aria-label="Permalink to &quot;6. 构建渲染树（Render Tree）&quot;">​</a></h2><p>DOM 树和 CSSOM 合并生成渲染树。</p><h3 id="步骤-5" tabindex="-1">步骤 <a class="header-anchor" href="#步骤-5" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ul><li><strong>计算样式</strong>：将 CSS 规则应用于 DOM 节点。</li><li><strong>过滤不可见元素</strong>：如 <code>display: none</code> 的节点不进入渲染树。</li></ul><h3 id="事件钩子-5" tabindex="-1">事件钩子 <a class="header-anchor" href="#事件钩子-5" aria-label="Permalink to &quot;事件钩子&quot;">​</a></h3><ul><li><code>requestAnimationFrame</code>：监控渲染相关时机。</li></ul><hr><h2 id="_7-布局-layout-reflow" tabindex="-1">7. 布局（Layout / Reflow） <a class="header-anchor" href="#_7-布局-layout-reflow" aria-label="Permalink to &quot;7. 布局（Layout / Reflow）&quot;">​</a></h2><p>浏览器计算元素位置和大小。</p><h3 id="步骤-6" tabindex="-1">步骤 <a class="header-anchor" href="#步骤-6" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ul><li><strong>布局计算</strong>：生成节点的几何信息（如宽度、高度、坐标）。</li><li><strong>回流（Reflow）</strong>：DOM 或 CSSOM 变化时重新布局。</li></ul><h3 id="事件钩子-6" tabindex="-1">事件钩子 <a class="header-anchor" href="#事件钩子-6" aria-label="Permalink to &quot;事件钩子&quot;">​</a></h3><ul><li><code>resize</code>：窗口大小变化时触发。</li></ul><hr><h2 id="_8-绘制-painting" tabindex="-1">8. 绘制（Painting） <a class="header-anchor" href="#_8-绘制-painting" aria-label="Permalink to &quot;8. 绘制（Painting）&quot;">​</a></h2><p>浏览器将渲染树转换为屏幕像素。</p><h3 id="步骤-7" tabindex="-1">步骤 <a class="header-anchor" href="#步骤-7" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ul><li><strong>分层</strong>：将内容分为多个图层（如背景、前景）。</li><li><strong>光栅化</strong>：将图层转换为位图。</li><li><strong>合成（Compositing）</strong>：合并图层为最终画面。</li></ul><h3 id="事件钩子-7" tabindex="-1">事件钩子 <a class="header-anchor" href="#事件钩子-7" aria-label="Permalink to &quot;事件钩子&quot;">​</a></h3><ul><li><code>requestAnimationFrame</code>：在绘制前执行回调。</li><li><code>performance</code> API：记录绘制时间。</li></ul><hr><h2 id="_9-页面加载完成的事件" tabindex="-1">9. 页面加载完成的事件 <a class="header-anchor" href="#_9-页面加载完成的事件" aria-label="Permalink to &quot;9. 页面加载完成的事件&quot;">​</a></h2><p>浏览器在关键阶段触发以下事件。</p><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><ul><li><strong><code>DOMContentLoaded</code></strong>： <ul><li><strong>触发时机</strong>：HTML 解析完成，DOM 树构建完成。</li><li><strong>监听方式</strong>：<code>document.addEventListener(&quot;DOMContentLoaded&quot;, callback)</code>。</li></ul></li><li><strong><code>load</code></strong>： <ul><li><strong>触发时机</strong>：所有资源（图片、CSS、脚本等）加载完成。</li><li><strong>监听方式</strong>：<code>window.addEventListener(&quot;load&quot;, callback)</code>。</li></ul></li><li><strong><code>beforeunload</code></strong>： <ul><li><strong>触发时机</strong>：页面即将卸载。</li><li><strong>监听方式</strong>：<code>window.addEventListener(&quot;beforeunload&quot;, callback)</code>。</li></ul></li></ul><hr><h2 id="_10-交互与动态更新" tabindex="-1">10. 交互与动态更新 <a class="header-anchor" href="#_10-交互与动态更新" aria-label="Permalink to &quot;10. 交互与动态更新&quot;">​</a></h2><p>页面渲染完成后，用户交互或脚本触发更新。</p><h3 id="事件-1" tabindex="-1">事件 <a class="header-anchor" href="#事件-1" aria-label="Permalink to &quot;事件&quot;">​</a></h3><ul><li><strong>用户事件</strong>：如 <code>click</code>、<code>scroll</code>、<code>keydown</code>。 <ul><li><strong>监听方式</strong>：<code>element.addEventListener(&quot;click&quot;, callback)</code>。</li></ul></li><li><strong>动画与重绘</strong>： <ul><li><code>requestAnimationFrame</code>：用于平滑动画。</li><li><code>IntersectionObserver</code>：监听元素进入视口。</li></ul></li><li><strong>DOM/CSSOM 修改</strong>： <ul><li><code>MutationObserver</code>：监听 DOM 结构或属性变化。</li></ul></li></ul><hr><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>浏览器从请求到渲染的主要阶段及事件钩子如下：</p><table><thead><tr><th>阶段</th><th>主要任务</th><th>事件钩子</th></tr></thead><tbody><tr><td>网络请求</td><td>发送请求、接收响应</td><td><code>fetch</code>、<code>performance</code> API</td></tr><tr><td>HTML 解析</td><td>构建 DOM 树</td><td><code>DOMContentLoaded</code></td></tr><tr><td>CSS 加载</td><td>构建 CSSOM</td><td><code>&lt;link&gt;.onload</code></td></tr><tr><td>JS 执行</td><td>执行脚本</td><td><code>&lt;script&gt;.onload</code>、<code>defer</code>/<code>async</code></td></tr><tr><td>渲染与绘制</td><td>生成渲染树、绘制页面</td><td><code>requestAnimationFrame</code></td></tr><tr><td>加载完成</td><td>所有资源加载完成</td><td><code>load</code></td></tr><tr><td>交互</td><td>处理用户操作和动态更新</td><td><code>click</code>、<code>scroll</code> 等</td></tr></tbody></table><p>此过程高度并发（如 CSS 和 JS 加载与 HTML 解析并行），开发者可通过上述钩子介入每个阶段。</p>',74),d=[r];function i(n,c,s,h,u,g){return o(),t("div",null,d)}const m=e(l,[["render",i]]);export{q as __pageData,m as default};
