import{_ as s,c as i,o as t,a2 as a}from"./chunks/framework.Dr1n16L8.js";const E=JSON.parse('{"title":"返回 NodeList 和 HTMLCollection 的操作","description":"","frontmatter":{},"headers":[],"relativePath":"pages/language/js/test.md","filePath":"pages/language/js/test.md","lastUpdated":1745906156000}'),e={name:"pages/language/js/test.md"},l=a('<h1 id="返回-nodelist-和-htmlcollection-的操作" tabindex="-1">返回 <code>NodeList</code> 和 <code>HTMLCollection</code> 的操作 <a class="header-anchor" href="#返回-nodelist-和-htmlcollection-的操作" aria-label="Permalink to &quot;返回 `NodeList` 和 `HTMLCollection` 的操作&quot;">​</a></h1><p>在 JavaScript 中，<code>NodeList</code> 和 <code>HTMLCollection</code> 是两种常见的 DOM 操作返回类型，它们都表示 DOM 元素的集合，但行为和用途有所不同。以下是详细说明返回这两种类型的操作，以及它们的区别和使用场景。</p><hr><h2 id="_1-返回-nodelist-的操作" tabindex="-1">1. 返回 <code>NodeList</code> 的操作 <a class="header-anchor" href="#_1-返回-nodelist-的操作" aria-label="Permalink to &quot;1. 返回 `NodeList` 的操作&quot;">​</a></h2><p><code>NodeList</code> 是一个由节点（<code>Node</code>）组成的类数组对象，通常由 DOM 查询方法返回。它可以包含任何类型的节点（如元素节点、文本节点等），并且在现代 JavaScript 中是可迭代的。</p><h3 id="常见方法" tabindex="-1">常见方法 <a class="header-anchor" href="#常见方法" aria-label="Permalink to &quot;常见方法&quot;">​</a></h3><ul><li><p><strong><code>document.querySelectorAll(selector)</code></strong></p><ul><li><strong>描述</strong>：根据 CSS 选择器返回所有匹配的元素。</li><li><strong>返回</strong>：静态 <code>NodeList</code>（不会随 DOM 变化而更新）。</li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> divs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelectorAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(divs); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NodeList [div, div, ...]</span></span></code></pre></div></li></ul></li><li><p><strong><code>element.childNodes</code></strong></p><ul><li><strong>描述</strong>：返回元素的所有子节点，包括元素节点、文本节点、注释节点等。</li><li><strong>返回</strong>：动态 <code>NodeList</code>（随 DOM 变化实时更新）。</li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#parent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent.childNodes;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nodes); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NodeList [text, div, text, ...]</span></span></code></pre></div></li></ul></li><li><p><strong><code>element.getElementsByClassName(className)</code></strong>（部分情况）</p><ul><li><strong>描述</strong>：某些浏览器或特定实现可能返回 <code>NodeList</code>，但标准返回 <code>HTMLCollection</code>（见下文）。</li><li><strong>注意</strong>：通常不依赖此特性。</li></ul></li></ul><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li><strong>静态 vs 动态</strong>： <ul><li><code>querySelectorAll</code> 返回静态 <code>NodeList</code>，是 DOM 的快照。</li><li><code>childNodes</code> 返回动态 <code>NodeList</code>，会随 DOM 更新。</li></ul></li><li><strong>可迭代</strong>：支持 <code>for...of</code> 和扩展运算符（<code>[...nodeList]</code>）。</li><li><strong>方法</strong>：自带 <code>forEach</code>，但没有其他数组方法（如 <code>map</code>、<code>filter</code>）。</li></ul><hr><h2 id="_2-返回-htmlcollection-的操作" tabindex="-1">2. 返回 <code>HTMLCollection</code> 的操作 <a class="header-anchor" href="#_2-返回-htmlcollection-的操作" aria-label="Permalink to &quot;2. 返回 `HTMLCollection` 的操作&quot;">​</a></h2><p><code>HTMLCollection</code> 是一个由元素（<code>Element</code>）组成的类数组对象，仅包含元素节点（不包括文本或注释节点）。它通常是动态的，会随 DOM 变化实时更新。</p><h3 id="常见方法-1" tabindex="-1">常见方法 <a class="header-anchor" href="#常见方法-1" aria-label="Permalink to &quot;常见方法&quot;">​</a></h3><ul><li><p><strong><code>document.getElementsByTagName(tagName)</code></strong></p><ul><li><strong>描述</strong>：根据标签名返回匹配的元素集合。</li><li><strong>返回</strong>：动态 <code>HTMLCollection</code>。</li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> divs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(divs); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// HTMLCollection [div, div, ...]</span></span></code></pre></div></li></ul></li><li><p><strong><code>document.getElementsByClassName(className)</code></strong></p><ul><li><strong>描述</strong>：根据类名返回匹配的元素集合。</li><li><strong>返回</strong>：动态 <code>HTMLCollection</code>。</li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsByClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(items); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// HTMLCollection [div.item, ...]</span></span></code></pre></div></li></ul></li><li><p><strong><code>element.children</code></strong></p><ul><li><strong>描述</strong>：返回元素的子元素（仅元素节点，不包括文本或注释）。</li><li><strong>返回</strong>：动态 <code>HTMLCollection</code>。</li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#parent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent.children;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(children); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// HTMLCollection [div, span, ...]</span></span></code></pre></div></li></ul></li><li><p><strong><code>document.forms</code>、<code>document.images</code> 等</strong></p><ul><li><strong>描述</strong>：特定的 DOM 属性返回文档中的表单、图片等集合。</li><li><strong>返回</strong>：动态 <code>HTMLCollection</code>。</li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> forms</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.forms;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(forms); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// HTMLCollection [form, ...]</span></span></code></pre></div></li></ul></li></ul><h3 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li><strong>动态性</strong>：<code>HTMLCollection</code> 通常是实时的，随 DOM 更新而变化。</li><li><strong>仅元素节点</strong>：只包含 <code>Element</code> 类型，不包括文本或注释节点。</li><li><strong>不可迭代</strong>：不支持 <code>for...of</code> 或扩展运算符（<code>[...htmlCollection]</code> 会报错）。</li><li><strong>方法</strong>：没有 <code>forEach</code>，需要转换为数组才能使用高级方法。</li></ul><hr><h2 id="nodelist-与-htmlcollection-的对比" tabindex="-1"><code>NodeList</code> 与 <code>HTMLCollection</code> 的对比 <a class="header-anchor" href="#nodelist-与-htmlcollection-的对比" aria-label="Permalink to &quot;`NodeList` 与 `HTMLCollection` 的对比&quot;">​</a></h2><table><thead><tr><th>特性</th><th><code>NodeList</code></th><th><code>HTMLCollection</code></th></tr></thead><tbody><tr><td><strong>内容</strong></td><td>任何节点（元素、文本等）</td><td>仅元素节点（<code>Element</code>）</td></tr><tr><td><strong>动态性</strong></td><td>静态（如 <code>querySelectorAll</code>）或动态（如 <code>childNodes</code>）</td><td>通常动态</td></tr><tr><td><strong>可迭代性</strong></td><td>是（ES6 后）</td><td>否</td></tr><tr><td><strong>自带方法</strong></td><td><code>forEach</code></td><td>无</td></tr><tr><td><strong>常见来源</strong></td><td><code>querySelectorAll</code>, <code>childNodes</code></td><td><code>getElementsByTagName</code>, <code>children</code></td></tr><tr><td><strong>转换为数组</strong></td><td><code>[...nodeList]</code> 或 <code>Array.from(nodeList)</code></td><td><code>Array.from(htmlCollection)</code></td></tr></tbody></table><hr><h2 id="转换为数组的实用方法" tabindex="-1">转换为数组的实用方法 <a class="header-anchor" href="#转换为数组的实用方法" aria-label="Permalink to &quot;转换为数组的实用方法&quot;">​</a></h2><p>由于 <code>NodeList</code> 和 <code>HTMLCollection</code> 都不是真正的数组，开发者常将其转换为数组以使用数组方法。</p><h3 id="nodelist" tabindex="-1"><code>NodeList</code> <a class="header-anchor" href="#nodelist" aria-label="Permalink to &quot;`NodeList`&quot;">​</a></h3><ul><li><strong>扩展运算符</strong>：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nodeList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelectorAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodeList];</span></span></code></pre></div></li></ul>',24),n=[l];function o(d,h,r,p,c,k){return t(),i("div",null,n)}const y=s(e,[["render",o]]);export{E as __pageData,y as default};
