import{_ as l,a as i,b as a}from"./chunks/houxubianli.BEKQCAUH.js";import{_ as t,c as e,o as r,a2 as o}from"./chunks/framework.Dr1n16L8.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/dataStructure/index01.md","filePath":"pages/dataStructure/index01.md","lastUpdated":1745804037000}'),s={name:"pages/dataStructure/index01.md"},u=o('<h6 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h6><ol><li>数据结构的分类：逻辑结构和物理结构</li></ol><ul><li><p>逻辑结构：线性结构和非线性结构</p></li><li><p>物理结构/存储结构：顺序存储，链式存储，索引存储，散列存储</p></li></ul><ol start="2"><li>常用数据结构</li></ol><ul><li>数组</li><li>队列：先进先出</li><li>链表：链表是一种物理存储单元上非连续，非顺序的存储结构。链表有一系列节点组成，所谓节点就是指链表中的每一个元素，每个节点包含两个数据，一个是存储元素的数据域（值），另一个是存储下一个节点地址的指针域。</li><li>栈：先进后出，类似于弹夹；</li><li>树： <ul><li>每个节点有零个或多个子节点；</li><li>没有父节点的节点称为根节点；</li><li>每一个非根节点有且只有一个父节点；</li><li>除了根节点外，每个子节点可以分为多个不相交的子树。</li></ul></li><li>二叉树 <ul><li>每个结点最多有两颗子树，结点的度最大为 2。</li><li>左子树和右子树是有顺序的，次序不能颠倒。</li><li>即使某结点只有一个子树，也要区分左右子树。</li><li>个结点的值均大于其左子树上任意一个结点的值。</li><li>每个结点的值均小于其右子树上任意 一个结点的值。</li></ul></li><li>散列表 <ul><li>散列表又叫哈希表，存储的是由键(key)和值(value)组 成的数据，根据键直接访问存储在内 存存储位置的数据结构</li></ul></li><li>堆(Heap) <ul><li>堆比较特殊，是一种图的树形结构。被用于实现“优先队列”(priority queues)，优先队列是一种数据结 构，可以自由添加数据，但取出数据时要从最小值开始按顺 序取出。在堆的树形结构中，各个顶点被称为 “结点”(node)，数据就存储在这些结点中。 只要满足下面两个特点的树形结构就是堆： 堆是一个完全二叉树（所谓完全二叉树就是除了最后一层其他层的节点个数都是满的）。 堆中每一个节点的值都必须大于等于或者小于其子树中每一个节点的值。</li></ul></li><li>图（Graph） <ul><li>图是相对复杂的一种数据结构，由顶点和连接每对顶点的边所构成的图形就是图。</li></ul></li></ul><h6 id="关于树" tabindex="-1">关于树 <a class="header-anchor" href="#关于树" aria-label="Permalink to &quot;关于树&quot;">​</a></h6><p>二叉树：斜树，满二叉树， 完全二叉树</p><ul><li>先序遍历： 访问根节点，先遍历所有的左子树，再先序遍历右子树 <img src="'+l+'" alt="先序遍历"></li><li>中序遍历： 中序遍历左子树，访问根节点，中序遍历右节点 <img src="'+i+'" alt="中序遍历"></li><li>后序遍历</li><li>后序遍历左子树，后序遍历右节点，访问根节点 <img src="'+a+'" alt="后序遍历"></li></ul>',8),_=[u];function c(d,n,p,m,h,f){return r(),e("div",null,_)}const P=t(s,[["render",c]]);export{g as __pageData,P as default};
