import{_ as a,c as e,o,a2 as i}from"./chunks/framework.Dr1n16L8.js";const k=JSON.parse('{"title":"浏览器缓存机制详解","description":"","frontmatter":{},"headers":[],"relativePath":"pages/http/cache.md","filePath":"pages/http/cache.md","lastUpdated":1745577654000}'),l={name:"pages/http/cache.md"},t=i(`<h1 id="浏览器缓存机制详解" tabindex="-1">浏览器缓存机制详解 <a class="header-anchor" href="#浏览器缓存机制详解" aria-label="Permalink to &quot;浏览器缓存机制详解&quot;">​</a></h1><p>浏览器缓存机制是浏览器优化页面加载速度的重要手段，通过存储已请求的资源（如 HTML、CSS、图片等），减少重复请求，提升用户体验。本文将介绍缓存的类型、工作原理、控制方式及相关细节。</p><hr><h2 id="_1-缓存的基本原理" tabindex="-1">1. 缓存的基本原理 <a class="header-anchor" href="#_1-缓存的基本原理" aria-label="Permalink to &quot;1. 缓存的基本原理&quot;">​</a></h2><p>浏览器缓存的核心目标是<strong>减少网络请求</strong>，通过在本地存储资源副本，根据一定规则决定是否使用缓存或重新请求服务器。</p><h3 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h3><ol><li><strong>首次请求</strong>：浏览器向服务器请求资源，服务器返回资源并附带缓存相关头信息。</li><li><strong>缓存存储</strong>：浏览器根据响应头将资源存储到本地（如内存或磁盘）。</li><li><strong>后续请求</strong>：浏览器检查本地缓存是否可用，决定使用缓存或重新请求。</li></ol><hr><h2 id="_2-缓存的分类" tabindex="-1">2. 缓存的分类 <a class="header-anchor" href="#_2-缓存的分类" aria-label="Permalink to &quot;2. 缓存的分类&quot;">​</a></h2><p>浏览器缓存主要分为两类：<strong>强缓存</strong>和<strong>协商缓存</strong>。</p><h3 id="_2-1-强缓存-strong-cache" tabindex="-1">2.1 强缓存（Strong Cache） <a class="header-anchor" href="#_2-1-强缓存-strong-cache" aria-label="Permalink to &quot;2.1 强缓存（Strong Cache）&quot;">​</a></h3><ul><li><strong>定义</strong>：浏览器直接使用本地缓存，不与服务器通信。</li><li><strong>控制方式</strong>：通过 HTTP 响应头中的 <code>Cache-Control</code> 或 <code>Expires</code> 实现。</li><li><strong>特点</strong>：状态码通常为 <code>200 (from disk/memory cache)</code>。</li></ul><h4 id="关键字段" tabindex="-1">关键字段 <a class="header-anchor" href="#关键字段" aria-label="Permalink to &quot;关键字段&quot;">​</a></h4><ul><li><strong><code>Cache-Control</code></strong>： <ul><li><code>max-age=&lt;秒&gt;</code>：缓存有效时间（如 <code>max-age=3600</code> 表示 1 小时）。</li><li><code>no-cache</code>：不使用强缓存，需协商。</li><li><code>no-store</code>：完全不缓存。</li><li><code>public</code>：可被所有用户缓存（如 CDN）。</li><li><code>private</code>：仅限浏览器缓存。</li></ul></li><li><strong><code>Expires</code></strong>： <ul><li>指定缓存过期时间（如 <code>Wed, 15 Mar 2025 12:00:00 GMT</code>）。</li><li><strong>注意</strong>：优先级低于 <code>Cache-Control</code>，依赖本地时间，可能不准确。</li></ul></li></ul><h4 id="工作机制" tabindex="-1">工作机制 <a class="header-anchor" href="#工作机制" aria-label="Permalink to &quot;工作机制&quot;">​</a></h4><ul><li>浏览器检查资源是否在有效期内： <ul><li>如果是，直接使用本地缓存。</li><li>如果过期，进入协商缓存或重新请求。</li></ul></li></ul><hr><h3 id="_2-2-协商缓存-conditional-cache" tabindex="-1">2.2 协商缓存（Conditional Cache） <a class="header-anchor" href="#_2-2-协商缓存-conditional-cache" aria-label="Permalink to &quot;2.2 协商缓存（Conditional Cache）&quot;">​</a></h3><ul><li><strong>定义</strong>：浏览器通过与服务器协商，验证缓存是否仍有效。</li><li><strong>控制方式</strong>：通过 <code>Last-Modified</code> / <code>If-Modified-Since</code> 或 <code>ETag</code> / <code>If-None-Match</code> 实现。</li><li><strong>特点</strong>：状态码为 <code>304 Not Modified</code>（缓存有效）或 <code>200</code>（需更新）。</li></ul><h4 id="关键字段-1" tabindex="-1">关键字段 <a class="header-anchor" href="#关键字段-1" aria-label="Permalink to &quot;关键字段&quot;">​</a></h4><ul><li><strong><code>Last-Modified</code> 和 <code>If-Modified-Since</code></strong>： <ul><li>服务器返回资源的最后修改时间（如 <code>Last-Modified: Tue, 14 Mar 2025 10:00:00 GMT</code>）。</li><li>浏览器下次请求时带上 <code>If-Modified-Since</code>，服务器比较时间： <ul><li>未修改：返回 <code>304</code>，使用缓存。</li><li>已修改：返回新资源。</li></ul></li></ul></li><li><strong><code>ETag</code> 和 <code>If-None-Match</code></strong>： <ul><li>服务器返回资源的唯一标识（如 <code>ETag: &quot;abc123&quot;</code>）。</li><li>浏览器下次请求时带上 <code>If-None-Match</code>，服务器比较标识： <ul><li>未变：返回 <code>304</code>，使用缓存。</li><li>已变：返回新资源。</li></ul></li></ul></li><li><strong>优先级</strong>：<code>ETag</code> 优先级高于 <code>Last-Modified</code>，因为时间精度有限。</li></ul><h4 id="工作机制-1" tabindex="-1">工作机制 <a class="header-anchor" href="#工作机制-1" aria-label="Permalink to &quot;工作机制&quot;">​</a></h4><ol><li>浏览器发起请求，携带条件头（如 <code>If-Modified-Since</code> 或 <code>If-None-Match</code>）。</li><li>服务器检查资源是否变化： <ul><li>未变：返回 <code>304</code>，浏览器使用缓存。</li><li>已变：返回新资源及更新后的缓存头。</li></ul></li></ol><hr><h2 id="_3-缓存存储位置" tabindex="-1">3. 缓存存储位置 <a class="header-anchor" href="#_3-缓存存储位置" aria-label="Permalink to &quot;3. 缓存存储位置&quot;">​</a></h2><p>浏览器缓存存储在不同的物理位置，影响加载速度：</p><ul><li><strong>内存缓存（Memory Cache）</strong>： <ul><li>存储在 RAM 中，速度快，但容量小，关闭标签页后清除。</li><li>适用于临时资源（如内联脚本）。</li></ul></li><li><strong>磁盘缓存（Disk Cache）</strong>： <ul><li>存储在硬盘中，容量大，持久性强，适用于较大文件（如图片）。</li></ul></li><li><strong>Service Worker</strong>： <ul><li>开发者通过 API 控制的缓存（如 <code>Cache API</code>），灵活性高。</li></ul></li><li><strong>HTTP 缓存</strong>： <ul><li>由浏览器根据 HTTP 头自动管理。</li></ul></li></ul><hr><h2 id="_4-缓存的控制方式" tabindex="-1">4. 缓存的控制方式 <a class="header-anchor" href="#_4-缓存的控制方式" aria-label="Permalink to &quot;4. 缓存的控制方式&quot;">​</a></h2><p>开发者通过 HTTP 头或浏览器行为控制缓存。</p><h3 id="_4-1-http-头控制" tabindex="-1">4.1 HTTP 头控制 <a class="header-anchor" href="#_4-1-http-头控制" aria-label="Permalink to &quot;4.1 HTTP 头控制&quot;">​</a></h3><ul><li><strong>强缓存</strong>：设置 <code>Cache-Control</code> 或 <code>Expires</code>。</li><li><strong>协商缓存</strong>：设置 <code>Last-Modified</code> 或 <code>ETag</code>。</li><li><strong>禁用缓存</strong>：<code>Cache-Control: no-store</code>。</li></ul><h3 id="_4-2-用户行为影响" tabindex="-1">4.2 用户行为影响 <a class="header-anchor" href="#_4-2-用户行为影响" aria-label="Permalink to &quot;4.2 用户行为影响&quot;">​</a></h3><ul><li><strong>普通刷新（F5）</strong>：检查强缓存，过期后协商缓存。</li><li><strong>强制刷新（Ctrl+F5）</strong>：忽略缓存，直接请求服务器。</li><li><strong>回退/前进</strong>：可能使用内存缓存（视浏览器实现）。</li></ul><h3 id="_4-3-html-meta-标签" tabindex="-1">4.3 HTML Meta 标签 <a class="header-anchor" href="#_4-3-html-meta-标签" aria-label="Permalink to &quot;4.3 HTML Meta 标签&quot;">​</a></h3><ul><li><code>&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-cache&quot;&gt;</code>：效果有限，优先级低于 HTTP 头。</li></ul><hr><h2 id="_5-缓存相关的事件与调试" tabindex="-1">5. 缓存相关的事件与调试 <a class="header-anchor" href="#_5-缓存相关的事件与调试" aria-label="Permalink to &quot;5. 缓存相关的事件与调试&quot;">​</a></h2><h3 id="事件钩子" tabindex="-1">事件钩子 <a class="header-anchor" href="#事件钩子" aria-label="Permalink to &quot;事件钩子&quot;">​</a></h3><ul><li><strong>无直接事件</strong>：缓存由浏览器底层管理，开发者无法直接监听缓存命中。</li><li><strong>间接监控</strong>： <ul><li><code>window.performance</code> API：查看资源加载来源（如 <code>from disk cache</code>）。</li><li><code>fetch</code> 或 <code>XMLHttpRequest</code>：通过状态码（<code>200</code> 或 <code>304</code>）判断缓存类型。</li></ul></li></ul><h3 id="调试工具" tabindex="-1">调试工具 <a class="header-anchor" href="#调试工具" aria-label="Permalink to &quot;调试工具&quot;">​</a></h3><ul><li><strong>开发者工具（DevTools）</strong>： <ul><li>Network 面板：显示资源状态（如 <code>from memory cache</code>、<code>304</code>）。</li><li>Application 面板：查看缓存存储内容。</li></ul></li></ul><hr><h2 id="_6-缓存的优缺点" tabindex="-1">6. 缓存的优缺点 <a class="header-anchor" href="#_6-缓存的优缺点" aria-label="Permalink to &quot;6. 缓存的优缺点&quot;">​</a></h2><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>减少网络请求，提升加载速度。</li><li>降低服务器压力，节省带宽。</li></ul><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>缓存过期或未更新可能导致用户看到旧内容。</li><li>调试复杂，需合理配置。</li></ul><hr><h2 id="_7-典型场景示例" tabindex="-1">7. 典型场景示例 <a class="header-anchor" href="#_7-典型场景示例" aria-label="Permalink to &quot;7. 典型场景示例&quot;">​</a></h2><p>示例 1：强缓存</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Cache-Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max-age=3600</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>示例 2：协商缓存</p><p>HTTP/1.1 200 OK ETag: &quot;xyz789&quot; Last-Modified: Tue, 14 Mar 2025 10:00:00 GMT</p><h2 id="后续请求" tabindex="-1">后续请求 <a class="header-anchor" href="#后续请求" aria-label="Permalink to &quot;后续请求&quot;">​</a></h2><p>GET /example.html If-None-Match: &quot;xyz789&quot; If-Modified-Since: Tue, 14 Mar 2025 10:00:00 GMT</p><h2 id="服务器响应" tabindex="-1">服务器响应 <a class="header-anchor" href="#服务器响应" aria-label="Permalink to &quot;服务器响应&quot;">​</a></h2><p>HTTP/1.1 304 Not Modified</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>浏览器缓存机制通过强缓存和协商缓存优化性能： 强缓存：依赖 Cache-Control 和 Expires，直接使用本地资源。</p><p>协商缓存：依赖 Last-Modified 和 ETag，与服务器验证。</p><p>存储位置：内存、磁盘、Service Worker 等。</p><p>控制方式：HTTP 头、用户行为。</p>`,63),r=[t];function s(n,d,c,h,u,p){return o(),e("div",null,r)}const f=a(l,[["render",s]]);export{k as __pageData,f as default};
